// Generated by CoffeeScript 1.9.3
(function() {
  var BackendHelper, CompositeDisposable, Disposable, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require('atom'), Disposable = ref.Disposable, CompositeDisposable = ref.CompositeDisposable;

  module.exports = BackendHelper = (function() {
    function BackendHelper(packageName, opts1) {
      var base, base1, base2, base3;
      this.packageName = packageName;
      this.opts = opts1;
      this.consume = bind(this.consume, this);
      this.init = bind(this.init, this);
      if (this.opts == null) {
        this.opts = {};
      }
      if ((base = this.opts).useBackend == null) {
        base.useBackend = 'useBackend';
      }
      if ((base1 = this.opts).backendInfo == null) {
        base1.backendInfo = 'backendInfo';
      }
      if ((base2 = this.opts).backendVar == null) {
        base2.backendVar = 'backend';
      }
      if ((base3 = this.opts).backendName == null) {
        base3.backendName = 'haskell-*-backend';
      }
      this.opts.main = this.opts.main;
    }

    BackendHelper.prototype.init = function() {
      var bknd;
      this.opts.main.config[this.opts.useBackend]["enum"] = [''];
      bknd = atom.config.get(this.packageName + "." + this.opts.useBackend);
      if (!!bknd) {
        this.opts.main.config[this.opts.useBackend]["enum"].push(bknd);
      }
      if (atom.config.get(this.packageName + "." + this.opts.backendInfo)) {
        return setTimeout(((function(_this) {
          return function() {
            var bn, message, p, ref1;
            if (((ref1 = _this.opts.main) != null ? ref1[_this.opts.backendVar] : void 0) == null) {
              bn = atom.config.get(_this.packageName + "." + _this.opts.useBackend);
              if (!bn) {
                message = _this.packageName + ": " + _this.packageName + " requires a package providing " + _this.opts.backendName + " service. Consider installing haskell-ghc-mod or other package, which provides " + _this.opts.backendName + ". You can disable this message in " + _this.packageName + " settings.";
              } else {
                p = atom.packages.getActivePackage(bn);
                if (p != null) {
                  message = _this.packageName + ": You have selected " + bn + " as your backend provider, but it does not provide " + _this.opts.backendName + " service. You may need to update " + bn + ". You can disable this message in " + _this.packageName + " settings.";
                } else {
                  message = _this.packageName + ": You have selected " + bn + " as your backend provider, but it failed to activate. Check your spelling and if " + bn + " is installed and activated. You can disable this message in " + _this.packageName + " settings.";
                }
              }
              atom.notifications.addWarning(message, {
                dismissable: true
              });
              return console.log(message);
            }
          };
        })(this)), 5000);
      }
    };

    BackendHelper.prototype.consume = function(service, opts) {
      var bn, bnold, hasSn, ref1, ref2;
      hasSn = (ref1 = service.name(), indexOf.call(this.opts.main.config[this.opts.useBackend]["enum"], ref1) >= 0);
      if (!hasSn) {
        this.opts.main.config[this.opts.useBackend]["enum"].push(service.name());
      }
      bn = atom.config.get(this.packageName + "." + this.opts.useBackend);
      if (!!bn && service.name() !== bn) {
        return;
      }
      if (((ref2 = this.opts.main) != null ? ref2[this.opts.backendVar] : void 0) != null) {
        bnold = this.opts.main[this.opts.backendVar].name();
        atom.notifications.addInfo(this.packageName + " is already using backend " + bnold + ", and new backend " + (service != null ? typeof service.name === "function" ? service.name() : void 0 : void 0) + " appeared. You can select one in " + this.packageName + " settings. Will keep using " + bnold + " for now.", {
          dismissable: true
        });
        return;
      }
      this.opts.main[this.opts.backendVar] = service;
      if (opts != null) {
        if (typeof opts.success === "function") {
          opts.success(service);
        }
      }
      return new Disposable((function(_this) {
        return function() {
          _this.opts.main[_this.opts.backendVar] = null;
          return opts != null ? typeof opts.dispose === "function" ? opts.dispose(service) : void 0 : void 0;
        };
      })(this));
    };

    return BackendHelper;

  })();

}).call(this);
