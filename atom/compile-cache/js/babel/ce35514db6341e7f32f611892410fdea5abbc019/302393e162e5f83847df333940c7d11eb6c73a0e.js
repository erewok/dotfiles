'use babel';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

var _require = require('atom');

var BufferedNodeProcess = _require.BufferedNodeProcess;

var _require2 = require('child_process');

var spawn = _require2.spawn;

var _require3 = require('fs');

var statSync = _require3.statSync;

var path = require('path');

var RELATIVE_EXACT_DEPS_PATH = path.join('elm-stuff', 'exact-dependencies.json');
var PATH_CACHE = new Map();
var LOG_PREFIX = 'Elm Autocomplete: ';

module.exports = function (prefix, filePath) {
  return new Promise(function (resolve) {
    var lines = [];
    var elmProjectPath = findClosestElmProjectPath(filePath.split(path.sep).slice(0, -1));
    var executablePath = atom.config.get('language-elm.elmOraclePath');
    var options = {
      cwd: elmProjectPath,
      env: process.env
    };

    var accumulateOutput = function accumulateOutput(line) {
      lines.push(line);
    };

    var provideSuggestions = function provideSuggestions() {
      resolve(JSON.parse(parseOutput(lines[0])));
    };

    if (atom.inDevMode()) {
      console.log(LOG_PREFIX + ' Executing - ' + executablePath + ' ' + filePath + ' ' + prefix);
      console.log(LOG_PREFIX + ' From Directory - ' + elmProjectPath);
    }

    var onProcessError = function onProcessError(_ref) {
      var error = _ref.error;
      var handle = _ref.handle;

      if (atom.inDevMode()) {
        atom.notifications.addError('Elm Autocomplete Error', {
          detail: 'Failed to run:' + [executablePath, filePath, prefix].join(' ') + '\n\n' + 'From the following directory:' + elmProjectPath + '\n\n' + error.message
        });
      }

      handle();

      throw error;
    };

    // Fix for windows as BufferedNodeProcess doesn't spawn properly; See Atom issue 2887.
    if (process.platform === 'win32') {
      var results = spawn(getCmdPath(), ['/c', executablePath, filePath, prefix], options);

      results.stdout.on('data', function (data) {
        accumulateOutput(data.toString());
      });

      results.on('close', function () {
        provideSuggestions();
      });

      results.on('error', function (err) {
        throw err;
      });
    } else {
      new BufferedNodeProcess({
        command: executablePath,
        args: [filePath, prefix],
        options: options,
        stdout: accumulateOutput,
        exit: provideSuggestions
      }).onWillThrowError(onProcessError);
    }
  });
};

var recursivelyFindClosestElmProjectPath = function recursivelyFindClosestElmProjectPath(_x, _x2) {
  var _again = true;

  _function: while (_again) {
    var pathParts = _x,
        startPath = _x2;
    _again = false;

    var projectPath = startPath || pathParts.length ? buildAbsolutePath(pathParts) : '';

    var exactDependenciesPath = undefined;

    if (projectPath) {
      exactDependenciesPath = path.join(projectPath, RELATIVE_EXACT_DEPS_PATH);

      try {
        statSync(exactDependenciesPath);
        return projectPath;
      } catch (e) {
        _x = pathParts.slice(0, -1);
        _x2 = undefined;
        _again = true;
        projectPath = exactDependenciesPath = undefined;
        continue _function;
      }
    } else {
      throw new Error('No elm project directory found');
    }
  }
};

var buildAbsolutePath = function buildAbsolutePath(pathParts) {
  return path.resolve.apply(path, [path.sep].concat(_toConsumableArray(pathParts)));
};

// Finds and caches the elm project path closest to the given path
var findClosestElmProjectPath = function findClosestElmProjectPath(pathParts) {
  var path = pathParts.length ? buildAbsolutePath(pathParts) : '';

  if (PATH_CACHE.has(path)) {
    return PATH_CACHE.get(path);
  } else {
    try {
      var elmProjectPath = recursivelyFindClosestElmProjectPath(pathParts, path);
      PATH_CACHE.set(path, elmProjectPath);
      return elmProjectPath;
    } catch (error) {
      throw error;
    }
  }
};

var parseOutput = function parseOutput(text) {
  text = text && text.slice(0, text.indexOf('\n'));

  if (!text) {
    throw new Error('No elm-oracle suggestions');
  } else {
    return text;
  }
};

var getCmdPath = function getCmdPath() {
  if (process.env.comspec) {
    return process.env.comspec;
  } else if (process.env.SystemRoot) {
    return path.join(process.env.SystemRoot, 'System32', 'cmd.exe');
  } else {
    return 'cmd.exe';
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lcmV3b2svLmF0b20vcGFja2FnZXMvbGFuZ3VhZ2UtZWxtL2xpYi9lbG1PcmFjbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFBOzs7O2VBRXFCLE9BQU8sQ0FBQyxNQUFNLENBQUM7O0lBQXZDLG1CQUFtQixZQUFuQixtQkFBbUI7O2dCQUNULE9BQU8sQ0FBQyxlQUFlLENBQUM7O0lBQWxDLEtBQUssYUFBTCxLQUFLOztnQkFDUSxPQUFPLENBQUMsSUFBSSxDQUFDOztJQUExQixRQUFRLGFBQVIsUUFBUTs7QUFDaEIsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBOztBQUU1QixJQUFNLHdCQUF3QixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLHlCQUF5QixDQUFDLENBQUE7QUFDbEYsSUFBTSxVQUFVLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtBQUM1QixJQUFNLFVBQVUsR0FBRyxvQkFBb0IsQ0FBQTs7QUFFdkMsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUs7QUFDckMsU0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFBLE9BQU8sRUFBSTtBQUM1QixRQUFNLEtBQUssR0FBRyxFQUFFLENBQUE7QUFDaEIsUUFBTSxjQUFjLEdBQUcseUJBQXlCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDdkYsUUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtBQUNwRSxRQUFNLE9BQU8sR0FBRztBQUNkLFNBQUcsRUFBRSxjQUFjO0FBQ25CLFNBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztLQUNqQixDQUFBOztBQUVELFFBQU0sZ0JBQWdCLEdBQUcsU0FBbkIsZ0JB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QUFDLENBQUMsQ0FBQTs7QUFFaEQsTUFBSSxDQUFDLElBQUksRUFBRTtBQUNULFVBQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQTtHQUM3QyxNQUFNO0FBQ0wsV0FBTyxJQUFJLENBQUE7R0FDWjtDQUNGLENBQUE7O0FBRUQsSUFBTSxVQUFVLEdBQUcsU0FBYixVQUFVLEdBQVM7QUFDdkIsTUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRTtBQUN2QixXQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFBO0dBQzNCLE1BQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRTtBQUNqQyxXQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0dBQ2hFLE1BQU07QUFDTCxXQUFPLFNBQVMsQ0FBQTtHQUNqQjtDQUNGLENBQUEiLCJmaWxlIjoiL1VzZXJzL2VyZXdvay8uYXRvbS9wYWNrYWdlcy9sYW5ndWFnZS1lbG0vbGliL2VsbU9yYWNsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5cbmNvbnN0IHsgQnVmZmVyZWROb2RlUHJvY2VzcyB9ID0gcmVxdWlyZSgnYXRvbScpXG5jb25zdCB7IHNwYXduIH0gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJylcbmNvbnN0IHsgc3RhdFN5bmMgfSA9IHJlcXVpcmUoJ2ZzJylcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcblxuY29uc3QgUkVMQVRJVkVfRVhBQ1RfREVQU19QQVRIID0gcGF0aC5qb2luKCdlbG0tc3R1ZmYnLCAnZXhhY3QtZGVwZW5kZW5jaWVzLmpzb24nKVxuY29uc3QgUEFUSF9DQUNIRSA9IG5ldyBNYXAoKVxuY29uc3QgTE9HX1BSRUZJWCA9ICdFbG0gQXV0b2NvbXBsZXRlOiAnXG5cbm1vZHVsZS5leHBvcnRzID0gKHByZWZpeCwgZmlsZVBhdGgpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIGNvbnN0IGxpbmVzID0gW11cbiAgICBjb25zdCBlbG1Qcm9qZWN0UGF0aCA9IGZpbmRDbG9zZXN0RWxtUHJvamVjdFBhdGgoZmlsZVBhdGguc3BsaXQocGF0aC5zZXApLnNsaWNlKDAsIC0xKSlcbiAgICBjb25zdCBleGVjdXRhYmxlUGF0aCA9IGF0b20uY29uZmlnLmdldCgnbGFuZ3VhZ2UtZWxtLmVsbU9yYWNsZVBhdGgnKVxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBjd2Q6IGVsbVByb2plY3RQYXRoLFxuICAgICAgZW52OiBwcm9jZXNzLmVudlxuICAgIH1cblxuICAgIGNvbnN0IGFjY3VtdWxhdGVPdXRwdXQgPSAobGluZSkgPT4ge1xuICAgICAgbGluZXMucHVzaChsaW5lKVxuICAgIH1cblxuICAgIGNvbnN0IHByb3ZpZGVTdWdnZXN0aW9ucyA9ICgpID0+IHtcbiAgICAgIHJlc29sdmUoSlNPTi5wYXJzZSgocGFyc2VPdXRwdXQobGluZXNbMF0pKSkpXG4gICAgfVxuXG4gICAgaWYgKGF0b20uaW5EZXZNb2RlKCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKGAke0xPR19QUkVGSVh9IEV4ZWN1dGluZyAtICR7ZXhlY3V0YWJsZVBhdGh9ICR7ZmlsZVBhdGh9ICR7cHJlZml4fWApXG4gICAgICBjb25zb2xlLmxvZyhgJHtMT0dfUFJFRklYfSBGcm9tIERpcmVjdG9yeSAtICR7ZWxtUHJvamVjdFBhdGh9YClcbiAgICB9XG5cbiAgICBjb25zdCBvblByb2Nlc3NFcnJvciA9ICh7ZXJyb3IsIGhhbmRsZX0pID0+IHtcbiAgICAgIGlmIChhdG9tLmluRGV2TW9kZSgpKSB7XG4gICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcignRWxtIEF1dG9jb21wbGV0ZSBFcnJvcicsIHtcbiAgICAgICAgICBkZXRhaWw6ICdGYWlsZWQgdG8gcnVuOicgK1xuICAgICAgICAgICAgW2V4ZWN1dGFibGVQYXRoLCBmaWxlUGF0aCwgcHJlZml4XS5qb2luKCcgJykgK1xuICAgICAgICAgICAgJ1xcblxcbicgK1xuICAgICAgICAgICAgJ0Zyb20gdGhlIGZvbGxvd2luZyBkaXJlY3Rvcnk6JyArXG4gICAgICAgICAgICBlbG1Qcm9qZWN0UGF0aCArXG4gICAgICAgICAgICAnXFxuXFxuJyArXG4gICAgICAgICAgICBlcnJvci5tZXNzYWdlXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGhhbmRsZSgpXG5cbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuXG4gICAgLy8gRml4IGZvciB3aW5kb3dzIGFzIEJ1ZmZlcmVkTm9kZVByb2Nlc3MgZG9lc24ndCBzcGF3biBwcm9wZXJseTsgU2VlIEF0b20gaXNzdWUgMjg4Ny5cbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgdmFyIHJlc3VsdHMgPSBzcGF3bihnZXRDbWRQYXRoKCksIFsnL2MnLCBleGVjdXRhYmxlUGF0aCwgZmlsZVBhdGgsIHByZWZpeF0sIG9wdGlvbnMpXG5cbiAgICAgIHJlc3VsdHMuc3Rkb3V0Lm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgYWNjdW11bGF0ZU91dHB1dChkYXRhLnRvU3RyaW5nKCkpXG4gICAgICB9KVxuXG4gICAgICByZXN1bHRzLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcHJvdmlkZVN1Z2dlc3Rpb25zKClcbiAgICAgIH0pXG5cbiAgICAgIHJlc3VsdHMub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aHJvdyBlcnJcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIChuZXcgQnVmZmVyZWROb2RlUHJvY2Vzcyh7XG4gICAgICAgIGNvbW1hbmQ6IGV4ZWN1dGFibGVQYXRoLFxuICAgICAgICBhcmdzOiBbZmlsZVBhdGgsIHByZWZpeF0sXG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgIHN0ZG91dDogYWNjdW11bGF0ZU91dHB1dCxcbiAgICAgICAgZXhpdDogcHJvdmlkZVN1Z2dlc3Rpb25zXG4gICAgICB9KSkub25XaWxsVGhyb3dFcnJvcihvblByb2Nlc3NFcnJvcilcbiAgICB9XG4gIH0pXG59XG5cbmNvbnN0IHJlY3Vyc2l2ZWx5RmluZENsb3Nlc3RFbG1Qcm9qZWN0UGF0aCA9IChwYXRoUGFydHMsIHN0YXJ0UGF0aCkgPT4ge1xuICBjb25zdCBwcm9qZWN0UGF0aCA9IHN0YXJ0UGF0aCB8fFxuICBwYXRoUGFydHMubGVuZ3RoXG4gICAgPyBidWlsZEFic29sdXRlUGF0aChwYXRoUGFydHMpXG4gICAgOiAnJ1xuXG4gIGxldCBleGFjdERlcGVuZGVuY2llc1BhdGhcblxuICBpZiAocHJvamVjdFBhdGgpIHtcbiAgICBleGFjdERlcGVuZGVuY2llc1BhdGggPSBwYXRoLmpvaW4ocHJvamVjdFBhdGgsIFJFTEFUSVZFX0VYQUNUX0RFUFNfUEFUSClcblxuICAgIHRyeSB7XG4gICAgICBzdGF0U3luYyhleGFjdERlcGVuZGVuY2llc1BhdGgpXG4gICAgICByZXR1cm4gcHJvamVjdFBhdGhcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gcmVjdXJzaXZlbHlGaW5kQ2xvc2VzdEVsbVByb2plY3RQYXRoKHBhdGhQYXJ0cy5zbGljZSgwLCAtMSkpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gZWxtIHByb2plY3QgZGlyZWN0b3J5IGZvdW5kJylcbiAgfVxufVxuXG5jb25zdCBidWlsZEFic29sdXRlUGF0aCA9IChwYXRoUGFydHMpID0+IHBhdGgucmVzb2x2ZShwYXRoLnNlcCwgLi4ucGF0aFBhcnRzKVxuXG4vLyBGaW5kcyBhbmQgY2FjaGVzIHRoZSBlbG0gcHJvamVjdCBwYXRoIGNsb3Nlc3QgdG8gdGhlIGdpdmVuIHBhdGhcbmNvbnN0IGZpbmRDbG9zZXN0RWxtUHJvamVjdFBhdGggPSAocGF0aFBhcnRzKSA9PiB7XG4gIGNvbnN0IHBhdGggPSBwYXRoUGFydHMubGVuZ3RoID8gYnVpbGRBYnNvbHV0ZVBhdGgocGF0aFBhcnRzKSA6ICcnXG5cbiAgaWYgKFBBVEhfQ0FDSEUuaGFzKHBhdGgpKSB7XG4gICAgcmV0dXJuIFBBVEhfQ0FDSEUuZ2V0KHBhdGgpXG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGVsbVByb2plY3RQYXRoID0gcmVjdXJzaXZlbHlGaW5kQ2xvc2VzdEVsbVByb2plY3RQYXRoKHBhdGhQYXJ0cywgcGF0aClcbiAgICAgIFBBVEhfQ0FDSEUuc2V0KHBhdGgsIGVsbVByb2plY3RQYXRoKVxuICAgICAgcmV0dXJuIGVsbVByb2plY3RQYXRoXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHBhcnNlT3V0cHV0ID0gKHRleHQpID0+IHtcbiAgdGV4dCA9IHRleHQgJiYgdGV4dC5zbGljZSgwLCB0ZXh0LmluZGV4T2YoJ1xcbicpKVxuXG4gIGlmICghdGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gZWxtLW9yYWNsZSBzdWdnZXN0aW9ucycpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRleHRcbiAgfVxufVxuXG5jb25zdCBnZXRDbWRQYXRoID0gKCkgPT4ge1xuICBpZiAocHJvY2Vzcy5lbnYuY29tc3BlYykge1xuICAgIHJldHVybiBwcm9jZXNzLmVudi5jb21zcGVjXG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuU3lzdGVtUm9vdCkge1xuICAgIHJldHVybiBwYXRoLmpvaW4ocHJvY2Vzcy5lbnYuU3lzdGVtUm9vdCwgJ1N5c3RlbTMyJywgJ2NtZC5leGUnKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAnY21kLmV4ZSdcbiAgfVxufVxuIl19
//# sourceURL=/Users/erewok/.atom/packages/language-elm/lib/elmOracle.js
